// Example program
#include <iostream>
#include <vector>
#include <chrono>


using namespace std;
using namespace chrono;

vector<vector<int>>CreateM(int n)
{
    vector<vector<int>> M;
    M.resize(n);
    for (vector<int>& row:M)
        row.resize(n,L % 10); // Где L - номер группы, например для АТ-24-01  2401 % 10 = 1
    return M;
}

void OutputM(const vector<vector<int>>& M)
{
    for (auto row:M)
     {
         for (auto cell:row)
            cout<<cell<<" ";
        cout<<endl;
     }
}

int SumWithCache(const vector<vector<int>>& M)
{
    int s=0;
    for (int i=0; i<M.size();++i)
     {
         for (int j=0; j<M[i].size();++j)
            s+=M[i][j];
     }
     return s;
}

int SumWithoutCache(const vector<vector<int>>& M)
{
    int s=0;
    for (int i=0; i<M.size();++i)
     {
         for (int j=0; j<M[i].size();++j)
            s+=M[j][i];
     }
     return s;
}
int main()
{
    auto M = CreateM(150); 
   
        {
          auto start =  system_clock::now();
          OutputM(M);
          auto finish = system_clock::now();
          auto duration = duration_cast<microseconds>(finish-start).count();
          cout << "Вывод на экран:" << duration << "mcs"<<endl;
        }
        {
          auto start =  system_clock::now();
          SumWithoutCache(M);
          auto finish = system_clock::now();
          auto duration = duration_cast<microseconds>(finish-start).count();
          cout<< "Подсчёт суммы без использования кэш-памяти:" << duration << "mcs"<<endl;
        }
        {
          auto start =  system_clock::now();
          SumWithCache(M);
          auto finish = system_clock::now();
          auto duration = duration_cast<microseconds>(finish-start).count();
          cout<< "Подсчёт суммы с использованием кэш-памяти:" << duration << "mcs"<<endl;
        }
}
